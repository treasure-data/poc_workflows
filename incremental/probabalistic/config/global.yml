# sink_database: cdp_unification_probabalistic_${sub}
model_config_table: datamodel_build_history
api_server: 'api.treasuredata.com'
create_dashboard: 'yes'

base_table:                         #Used ONLY if you plan to concat some of the original id_cols into a composite key
# source_db: cdp_unification_${sub}                      #DB where the source input table for probabilistic lives
input_table: prob_input_table                          #name of input table
# id_col: ${canonical_id}               #name of canonica_id column created by Deterministic Unification

######## EDA & EXCLUSION OF OVERMERGED IDs ################
run_eda: 'yes'                                    #Run EDA framework to get Top-K Strings by value count to esnure there is not over-merging on faulty string values such as '/' or '-' etc.
exclude_overmerging: 'no'                         #yes - autmatically excludes the Top-K strings from the blocking/clustering process of probabilistic
top_k_vals: 100                                    #Top-K string values with the highest value counts you want to see from EDA and exclude from final unifcation


#--- columns used for Unification and their Types
dedupe_columns:

  - name: email                   #col name
    type: string                  #types are string, email, phone because we use different data-cleaning logic for the special column types to standerdize inputs
    weight: 0.7                  #decimal from 0.0-1.0, determines how much weight % the similarity score of that column contributes to the final matching score
    final_approval: 'no'          #Default = 'no', 'yes' = if customer gives us a final custom approval logic (ex. only accept matches where this col IS NOT NULL) the 'sql/acceptance_create_final_table.sql' query will apply logic

  - name: composite_address_zip
    type: string
    weight: 0.3
    final_approval: 'no'


output_suffix: user_master                        #gets added at the end of output tables to track different runs on different intput data

output_table: prob_final_cluster   #name of final clsuter_table with probabilistic matched IDs
cluster_col_name : cluster_id                     #name of the distinct clsuter_id column assigned to records that match
custom_filter: 'no'                               #if set to 'yes', the final approval logic param for each column will apply

#----  max_records_allowed ----> Number of records allowed per blocking process. If table size exceeds this then it will be split in chunks of that and processed in parallel to avoid memory limits.
#----  record_limit ----> Number of records to be processed by the Python code for the final clsutering/agorithm. If final blocking table exceeds this limit it will be split in chunks and processed in parallel docker images.

blocking_table: prob_final_blocking    #name of the blocking table
max_records_allowed: 100000000
record_limit: 500000


#---- Increasing the value of hashes,keygroups and jaccard_similarity_threshold will increase the Recall
#----                      hashes----> Number of hash functions
#----                   keygroups----> Number of hash values used for creating a signature
#----jaccard_similarity_threshold----> minimum jaccard similarity threshold to create blocks. The higher it is, the more strict the algorithm will be for clsuter_id. Default: 0.3-0.5

hashes: 7
keygroups: 4
jaccard_similarity_threshold: 0.7


#---Params for clustering and similarity , use string_type cosine or jarowinkler
### Can you please add a line for each parameter below with quick guidelines on how changing value will affect algo behavior?

###---convergence_threshold ---> just controls Soft Impute for NULL values and it is not as important to modify, so we can run as default. It would only have big impact when clsuters have many records and lots of records have NULL values.

###---cluster_threshold ---> bw 0-1, so the closer to 1.0 it is, the more strict the clustering logic would be, thus reducing number of clusters taht qualify for matching, but increasing similarity between records in each cluster. Recommended values: 0.45-0.80

###---string_type ---> use string_type fuzzy or jarowinkler, Default: jarowinkler since it is a bit more compute efficient. IF you leave blank, it will use fuzzy as default which is good for if you are matching a bigger corpus of text (ex. very long address string).

###---fill_missing ---> Default: True --> applies Soft Impute to NULL values to improve clustering scoring. When set to == False, it will give you 0 similarity when values = NULL and reduce clustering score. In most cases just leave as default.

###---avg_spend_per_user ---> Default: 50 --> allows to define how much customer spends on AVG per year to send marketing campaigns to a single ID, which determines the estimated savings, shown in the final dashboard.

convergence_threshold : 0.01
cluster_threshold: 0.70
string_type :
fill_missing: True
avg_spend_per_user: 100
num_block_splits: 1
query_engine: presto